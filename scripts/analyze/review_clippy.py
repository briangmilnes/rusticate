#!/usr/bin/env python3
"""
Analyzes Clippy output and generates a Pareto analysis of warnings.
Reads from analyses/clippy.txt (generated by: cargo clippy --all-targets --all-features 2>&1 | tee analyses/clippy.txt)
"""
# Git commit: 584a672b6a34782766863c5f76a461d3297a741a
# Date: 2025-10-17 05:17:36 -0700


import sys
from pathlib import Path
from collections import Counter
import re

def parse_clippy_warnings(clippy_file):
    """Extract warning types from clippy output"""
    warning_pattern = re.compile(r'help: for further information visit.*#(\w+)')
    warnings = []
    
    with open(clippy_file) as f:
        for line in f:
            match = warning_pattern.search(line)
            if match:
                warnings.append(match.group(1))
    
    return Counter(warnings)

def print_pareto_analysis(warning_counts):
    """Print Pareto analysis of warnings"""
    if not warning_counts:
        print("No warnings found in clippy output")
        return
    
    # Sort by count descending
    sorted_warnings = sorted(warning_counts.items(), key=lambda x: x[1], reverse=True)
    total = sum(count for _, count in sorted_warnings)
    
    print(f'Clippy Warning Pareto Analysis (Total: {total} warnings)\n')
    print(f"{'Count':<8} {'%':<7} {'Cumul%':<8} {'Warning Type':<35}")
    print('=' * 70)
    
    cumulative = 0
    for warning_type, count in sorted_warnings:
        pct = (count / total) * 100
        cumulative += count
        cumul_pct = (cumulative / total) * 100
        print(f'{count:<8} {pct:>6.1f}% {cumul_pct:>7.1f}%  {warning_type}')
    
    # 80/20 Analysis
    print('\n80/20 Analysis:')
    cumulative = 0
    top_count = 0
    for warning_type, count in sorted_warnings:
        cumulative += count
        top_count += 1
        if cumulative / total >= 0.80:
            print(f'Top {top_count} warning types account for {cumulative/total*100:.1f}% of all warnings')
            break

def main():
    repo_root = Path(__file__).parent.parent.parent
    clippy_file = repo_root / "analyses" / "clippy.txt"
    
    if not clippy_file.exists():
        print(f"❌ Clippy output not found: {clippy_file}")
        print("\nRun first: cargo clippy --all-targets --all-features 2>&1 | tee analyses/clippy.txt")
        return 1
    
    warning_counts = parse_clippy_warnings(clippy_file)
    print_pareto_analysis(warning_counts)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

