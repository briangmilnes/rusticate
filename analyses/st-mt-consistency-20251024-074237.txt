    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.04s
     Running `target/debug/rusticate-review-st-mt-consistency --dir APAS-AI-copy/apas-ai`
Entering directory: APAS-AI-copy/apas-ai
Building operation tables...
Found 2,708 operations across 235 modules
Building call graph...
Built call graph with 8,996 edges
Finding direct parallel operations...
Found 86 operations with direct parallelism
Computing transitive parallelism (DFS)...
Found 127 operations with transitive parallelism
Analyzing files...
Checking 661 files
‚úó St/Mt Consistency violations found:

================================================================================
Mt files without parallelism (checked transitively via DFS):
================================================================================
src/Chap35/OrderStatSelectMtEph.rs: No parallel operations found (even transitively)
src/Chap35/OrderStatSelectMtPer.rs: No parallel operations found (even transitively)
src/Chap27/ScanContractMtEph.rs: No parallel operations found (even transitively)
src/Chap38/BSTParaMtEph.rs: No parallel operations found (even transitively)
src/Chap26/DivConReduceMt.rs: No parallel operations found (even transitively)
src/Chap19/ArraySeqMtEph.rs: No parallel operations found (even transitively)
src/Chap62/StarPartitionMtEph.rs: No parallel operations found (even transitively)
src/Chap52/AdjMatrixGraphMtPer.rs: No parallel operations found (even transitively)
src/Chap52/AdjTableGraphMtPer.rs: No parallel operations found (even transitively)
src/Chap52/AdjSeqGraphMtPer.rs: No parallel operations found (even transitively)
src/Chap52/AdjMatrixGraphMtEph.rs: No parallel operations found (even transitively)
src/Chap52/EdgeSetGraphMtPer.rs: No parallel operations found (even transitively)
src/Chap52/AdjSeqGraphMtEph.rs: No parallel operations found (even transitively)
src/Chap39/BSTTreapMtEph.rs: No parallel operations found (even transitively)
src/Chap39/BSTSetTreapMtEph.rs: No parallel operations found (even transitively)
src/Chap39/BSTParaTreapMtEph.rs: No parallel operations found (even transitively)
src/Chap54/BFSMtPer.rs: No parallel operations found (even transitively)
src/Chap54/BFSMtEph.rs: No parallel operations found (even transitively)
src/Chap36/QuickSortMtSlice.rs: No parallel operations found (even transitively)
src/Chap36/QuickSortMt.rs: No parallel operations found (even transitively)
src/Chap28/MaxContigSubSumOptMtEph.rs: No parallel operations found (even transitively)
src/Chap43/OrderedSetMtEph.rs: No parallel operations found (even transitively)
src/Chap43/OrderedTableMtPer.rs: No parallel operations found (even transitively)
src/Chap64/SpanTreeMtEph.rs: No parallel operations found (even transitively)
src/Chap64/TSPApproxMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTSetAVLMtEph.rs: No parallel operations found (even transitively)
src/Chap37/AVLTreeSeqMtPer.rs: No parallel operations found (even transitively)
src/Chap37/BSTSetPlainMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTSetSplayMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTBBAlphaMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTPlainMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTSplayMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTSetRBMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTRBMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTAVLMtEph.rs: No parallel operations found (even transitively)
src/Chap37/BSTSetBBAlphaMtEph.rs: No parallel operations found (even transitively)
src/Chap53/GraphSearchMtPer.rs: No parallel operations found (even transitively)
src/Chap53/PQMinMtPer.rs: No parallel operations found (even transitively)
src/Chap53/PQMinMtEph.rs: No parallel operations found (even transitively)
src/Chap59/JohnsonMtEphInt.rs: No parallel operations found (even transitively)
src/Chap59/JohnsonMtEphFloat.rs: No parallel operations found (even transitively)

================================================================================
Mt files with threshold-based serial fallback:
(APAS is a class example - should always demonstrate parallelism)
================================================================================
src/Chap41/AVLTreeSetMtPer.rs:76: if n <= 1 {
src/Chap41/AVLTreeSetMtPer.rs:117: if n <= 8 {
src/Chap41/AVLTreeSetMtPer.rs:158: if n <= 8 {
src/Chap41/AVLTreeSetMtPer.rs:207: if n <= 8 {
src/Chap26/MergeSortMt.rs:164: if n <= 1 {
src/Chap06/WeightedUnDirGraphMtEphFloat.rs:83: if n <= 8 {
src/Chap06/WeightedUnDirGraphMtEphInt.rs:81: if n <= 8 {
src/Chap06/LabUnDirGraphMtEph.rs:127: if n <= 8 {
src/Chap06/WeightedDirGraphMtEphFloat.rs:113: if n <= 8 {
src/Chap06/WeightedDirGraphMtEphFloat.rs:168: if n <= 8 {
src/Chap06/UnDirGraphMtEph.rs:85: if n <= 8 {
src/Chap06/UnDirGraphMtEph.rs:141: if n <= 8 {
src/Chap06/DirGraphMtEph.rs:105: if n <= 8 {
src/Chap06/DirGraphMtEph.rs:150: if n <= 8 {
src/Chap06/DirGraphMtEph.rs:200: if n <= 8 {
src/Chap06/DirGraphMtEph.rs:250: if n <= 8 {
src/Chap06/DirGraphMtEph.rs:295: if n <= 8 {
src/Chap06/WeightedDirGraphMtEphInt.rs:81: if n <= 8 {
src/Chap06/WeightedDirGraphMtEphInt.rs:133: if n <= 8 {
src/Chap06/LabDirGraphMtEph.rs:116: if n <= 8 {
src/Chap06/LabDirGraphMtEph.rs:168: if n <= 8 {
src/Chap11/FibonacciMt.rs:27: if n <= 1 {

================================================================================
THREAD EXPLOSION RISK - Recursive functions spawning multiple threads:
(Recommendation: Use a thread pool like rayon instead of raw spawning)
================================================================================
src/Chap27/ReduceContractMtEph.rs:26: 2 spawn(s) detected
  fn reduce_contract_parallel<F: Fn(&T, &T) -> T + Send + Sync + 'static>(
  ‚Üí Potential threads at depth 5: 32 (2^5)

src/Chap26/MergeSortMt.rs:28: 2 spawn(s) detected
  fn merge_parallel(left: &ArraySeqMtPerS<T>, right: &ArraySeqMtPerS<T>) -> ArraySeqMtPerS<T> {
  ‚Üí Potential threads at depth 5: 32 (2^5)

src/Chap19/ArraySeqMtEphSlice.rs:248: 4 spawn(s) detected
  fn reduce<F: Fn(&T, &T) -> T + Send + Sync + Clone + 'static>(a: &Self, f: F, id: T) -> T {
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap06/LabUnDirGraphMtEph.rs:122: 2 spawn(s) detected
  fn neighbors(&self, v: &V) -> SetStEph<V> {
  ‚Üí Potential threads at depth 5: 32 (2^5)

src/Chap49/SubsetSumMtEph.rs:53: 4 spawn(s) detected
  /// Internal parallel recursive subset sum with shared memoization
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap49/SubsetSumMtPer.rs:43: 4 spawn(s) detected
  /// Internal parallel recursive subset sum with shared memoization
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap49/MinEditDistMtEph.rs:64: 4 spawn(s) detected
  /// Internal parallel recursive minimum edit distance with shared memoization
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap49/MinEditDistMtPer.rs:47: 4 spawn(s) detected
  /// Internal parallel recursive minimum edit distance with shared memoization
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap51/TopDownDPMtEph.rs:109: 6 spawn(s) detected
  /// Claude Work: O(1) per call with memoization, O(|S|*|T|) total
  ‚Üí Potential threads at depth 5: 7,776 (6^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap51/TopDownDPMtPer.rs:111: 6 spawn(s) detected
  /// Claude Work: O(1) per call with memoization, O(|S|*|T|) total
  ‚Üí Potential threads at depth 5: 7,776 (6^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap50/OptBinSearchTreeMtEph.rs:64: 4 spawn(s) detected
  /// Parallel reduction to find minimum cost among root choices
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap50/MatrixChainMtPer.rs:64: 4 spawn(s) detected
  /// Parallel reduction to find minimum cost among split choices
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap50/OptBinSearchTreeMtPer.rs:57: 4 spawn(s) detected
  /// Parallel reduction to find minimum cost among root choices
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap50/MatrixChainMtEph.rs:72: 4 spawn(s) detected
  /// Parallel reduction to find minimum cost among split choices
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism

src/Chap28/MaxContigSubSumDivConMtEph.rs:72: 4 spawn(s) detected
  fn max_contig_sub_sum_divcon_mt(a: &ArraySeqMtEphS<i32>) -> Option<i32> {
  ‚Üí Potential threads at depth 5: 1,024 (4^5)
  ‚ö†Ô∏è  CRITICAL: Exponential thread explosion detected!
  üìã RECOMMENDATION: Replace raw spawning with rayon thread pool
     - Use rayon::join() instead of manual spawn()
     - Use .par_iter() for collections
     - Thread pool automatically limits parallelism


================================================================================
Test files named TestXxxMt not importing Mt modules:
(These files should import and test the Mt implementation)
================================================================================
tests/Chap52/TestEdgeSetGraphMtEph.rs: No Mt module imported

================================================================================
SUMMARY:
  St files with direct threading: 0
  St files calling parallel ops: 0
  Mt files without parallelism: 41
  Mt files with thresholds: 22
  Mt files with thread explosion risk: 15
  Test Mt files not importing Mt: 1
  Total violations: 79

Completed in 6011ms
